---
- name: Ensure redis-dev directory is on the Ansible control node
  when: "'k3s-master' in group_names"
  ansible.builtin.copy:
    src: /home/kali/disk/files
    dest: /tmp
    remote_src: no
    
- name: Create Kafka namespace
  kubernetes.core.k8s:
    state: present
    src: /tmp/files/kafka-main/namespace.yml

- name: Set zookeeper_replicas as integer
  ansible.builtin.set_fact:
    zookeeper_replicas: "{{ zookeeper_replicas | int }}"

- name: Construct Zookeeper Server List
  ansible.builtin.set_fact:
    zookeeper_servers: "{{ range(zookeeper_replicas | int) | map('string') | map('+', 'zookeeper-') | map('+', '-server.') | list }}"

- name: Construct SERVERS environment variable value
  ansible.builtin.set_fact:
    zookeeper_servers_string: "{{ zookeeper_servers | join(namespace + '.svc.cluster.local:2888:3888,') }}{{ namespace }}.svc.cluster.local:2888:3888"

- name: Deploy ZooKeeper StatefulSet (Direct Definition - Simplified Env)
  kubernetes.core.k8s:
    state: present
    namespace: kafka-main
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zookeeper
        namespace: kafka-main
      spec:
        serviceName: zookeeper
        replicas: "{{ zookeeper_replicas | int }}"
        selector:
          matchLabels:
            app: zookeeper
        template:
          metadata:
            labels:
              app: zookeeper
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchLabels:
                        app: zookeeper
                    topologyKey: "kubernetes.io/hostname"
            containers:
              - name: zookeeper
                image: zookeeper:3.7
                ports:
                  - containerPort: 2181
                    name: client
                  - containerPort: 2888
                    name: peer
                  - containerPort: 3888
                    name: leader-election
                volumeMounts:
                  - name: data
                    mountPath: /data
                env:
                  - name: MY_ID
                    value: "{{ '{{' }} ordinal + 1 {{ '}}' }}"
                  - name: SERVERS
                    value: "{{ zookeeper_servers_string }}"
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: zookeeper-data-{{ "{{" }} ordinal {{ "}}" }}
        volumeClaimTemplates:
          - metadata:
              name: data
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: "{{ storage_class }}"
              resources:
                requests:
                  storage: "{{ zookeeper_storage_size }}"

- name: Deploy ZooKeeper Service
  kubernetes.core.k8s:
    state: present
    src: /tmp/files/kafka-main/service-zoo.yml

- name: Wait for ZooKeeper to be ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: kafka-main
    label_selectors:
      app: zookeeper
  register: zookeeper_pods
  retries: 10
  delay: 10

- name: Deploy Kafka StatefulSet
  kubernetes.core.k8s:
    state: present
    src: /tmp/files/kafka-main/statefulset.yml

- name: Deploy Kafka Broker Service
  kubernetes.core.k8s:
    state: present
    src: /tmp/files/kafka-main/service.yml

- name: Wait for Kafka Brokers to be ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: kafka-main
    label_selectors:
      app: kafka
  register: kafka_pods
  retries: 10
  delay: 20

- name: Get Kafka broker IPs (for testing)
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: kafka-main
    name: kafka-brokers
  register: kafka_service_info
